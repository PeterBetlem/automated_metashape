# This is an example yaml configuration for a metashape run, modified from the UCDavis config file for compatibility between workflows. See readme: https://github.com/ucdavis/metashape for UCDavis license.

#### Project-level parameters:

# Project to load. If not a blank string, this will open an existing project at the path specified. If a blank string, creates a new empty project.
# Even if opening an existing project, all processing on it is saved as a new project (path and name specified below). The original project file is not modified.
# When no project is specified, photos are automatically added to the new project as the first step. When a project is specified, photos are not added because they are assumed to be in the project.
load_project_path: E:\Deltaneset_photogrammetry\metashape\KonusdalenWestFault_20201119T2342.psx

# The path to the directory of flight photos
# If there are multiple photo folders, set path to the folder that contains all the photo folders
photo_path: E:\Deltaneset_photogrammetry

# Path for exports (e.g., points, DSM, orthomosaic) and processing log. Will be created if does not exist.
output_path: E:\Deltaneset_photogrammetry\metashape

# Path to save Metashape project file (.psx). Will be created if does not exist
project_path: E:\Deltaneset_photogrammetry\metashape

# The identifier for the run. Will be used in naming output files. Recommended to include a photoset name and processing parameter set name.
run_name: KonusdalenWestFault

# CRS EPSG code that project outputs should be in (projection should be in meter units and intended for the project area)
project_crs: "EPSG::32633" # 32633 is WGS1984 UTM 33N

# Enable metashape "fine-level task subdivision" which reduces memory use by breaking processing into independent chunks that are run in series.
# Assuming there's enough memory, it seems to run 10-20% faster by disabling subdividing. But large projects can run out memory and fail if subdivide is not enabled.
subdivide_task: True

# Enable Networking:
networkProcessing:
    enabled: False
    server_ip: svalbox # Host Server IP address
    
#### Detect markers
detectGCPs:
    enabled: False 
    aruco_dict: aruco.DICT_6X6_250 # options include: aruco.DICT_6X6_250, aruco.DICT_4X4_50
    corner: "topright" # options: bottomleft (=1), topleft (2), topright (3), bottomright (4), centre (0).
    template:
        enabled: False # Keep false when using geopackage with long/lat data
        template_file_path: "../markers/markers_circle.png"
        template_size: 0.20 # one-sided dimension of a mxm square in metres. The example in Markers is a 20x20 cm frame, i.e. 0.20 m here.
    
#### Object extraction:
extractObject:
    enabled: False
    extraction_method: None # TODO: Will have to be configured correctly...

#### Processing parameters:
## Steps can be run or skipped using the 'enabled' parameter. If enabled == False, everything else in the step is irrelevant. Alternatively, the entire parameter can be removed (equals ==False for enabled)
## The metashape functions powering each of these steps are listed in the comments in parentheses.
## Refer to Metashape documentation for full parameter definitions: https://www.agisoft.com/pdf/metashape_python_api_1_6_0.pdf
## Parameter names here should fully follow the parameter names of the Metashape functions.
## In case default parameters are to be used, comment out the corresponding parameter with an # (Exception: addGCP parameters!)

addPhotos:
    enabled: False
    remove_photo_location_metadata: True #
    multispectral: False # Is this a multispectral photo set? If RGB, set to False.
    
# To use GCPs, a 'gcps' folder must exist in the top level photos folder. The contents of the 'gcps' folder are created by the prep_gcps.R script. See readme: https://github.com/ucdavis/metashape
addGCPs:
    enabled: False
    gcp_crs: "EPSG::4326" # CRS EPSG code of GCP coordinates. 32633 (UTM 33 N) is the CRS of the sample RGB photoset.
    marker_location_accuracy: 0.1 # Recommended: 0.1. Accuracy of GCPs real-world coordinates, in meters.
    marker_projection_accuracy: 8 # Recommended: 8. Accuracy of the identified locations of the GCPs within the images, in pixels.
    optimize_w_gcps_only: True # Optimize alignment using GCPs only: required for GCP locations to take precedence over photo GPS data. Disabling it makes GCPs essentially irrelevant.


calibrateReflectance: # (Metahsape: calibrateReflectance)
    enabled: False
    panel_filename: "RP04-1923118-OB.csv" # The calibration file must be in the "calibration" folder in the top-level project photos directory. See example panel calibration file in the calibration directory of project repo.
    use_reflectance_panels: True
    use_sun_sensor: True

alignPhotos: # (Metashape: alignPhotos)
    enabled: False
    downscale: 0 # Recommended: 1. How much to coarsen the photos when searching for tie points. Corresponding settings in Metashape: 0: Highest, 1: High, 2: Medium, 3: Low, 4: Lowest
    adaptive_fitting: True # Recommended: True. Should the camera lens model be fit at the same time as aligning photos?
    mask_tiepoints: True
    double_alignment: True
    
masks:
    enabled: False # Default, only enable if you have images with masks :)
    mask_path: E:\Anna\EK11\100MEDIA # Has to point to dir with masks
    mask_source: Metashape.MaskSourceFile # Default, other options include: [MaskSourceAlpha, MaskSourceFile, MaskSourceBackground, MaskSourceModel]

optimizeCameras: # (Metashape: optimizeCameras) # Remove # to activate :)
    enabled: False
    adaptive_fitting: True # Recommended: True. Should the camera lens model be fit at the same time as optinizing photos?
    tiepoint_covariance: True

buildDenseCloud: # (Metashape: buildDepthMaps, buildDenseCloud, classifyGroundPoints, and exportPoints)
    enabled: False
    ## For depth maps (buldDepthMaps)
    downscale: 2 # Recommended: 4. How much to coarsen the photos when searching for matches to build the dense cloud. Corresponding settings in Metashape: 0: Highest, 1: High, 2: Medium, 3: Low, 4: Lowest
    filter_mode: Metashape.MildFiltering # Recommended: Metashape.MildFiltering. How to filter the point cloud. Options are NoFiltering, MildFiltering, ModerateFiltering, AggressiveFiltering. Aggressive filtering removes detail and makes worse DEMs (at least for forest). NoFiltering takes very long. In trials, it never completed.
    reuse_depth: False # Recommended: False. Purpose unknown.
    ## For dense cloud (buildDenseCloud)
    keep_depth: False # Recommended: False. Purpose unknown.
    ## For both
    max_neighbors: 100 # Recommended: 100. Maximum number of neighboring photos to use for estimating point cloud. Higher numbers may increase accuracy but dramatically increase processing time.
    ## For ground point classification (classifyGroundPoints). Definitions here: https://www.agisoft.com/forum/index.php?topic=9328.0
    classify: False # Must be enabled if a digital terrain model (DTM) is needed either for orthomosaic or DTM export
    max_angle: 15.0 # Recommended: 15.0
    max_distance: 1.0 # Recommended: 1.0
    cell_size: 50.0 # Recommended: 50.0
    ## For dense cloud export (exportPoints)
    export: False # Whether to export dense cloud file.
    format: Metashape.PointsFormatLAS # Recommended: PointsFormatLAS. The file format to export points in.
    classes: "ALL" # Recommended: "ALL". Point classes to export. Must be a list. Or can set to "ALL" to use all points. An example of a specific class is: Metashape.PointClass.Ground

filterDenseCloud: 
    enabled: False
    point_confidence_max: 20 # maximum point confidence for points to be removed, ranges from 1-99

buildMesh: # (Metashape: buildModel)
    enabled: False
    ## For depth maps (buldModel)
    surface_type: Metashape.Arbitrary # Recommended: Metashape.Arbitrary
    face_count: Metashape.HighFaceCount # Options are [LowFaceCount, MediumFaceCount, HighFaceCount, CustomFaceCount]
    face_count_custom: 100000 # Integer, has to be enabled through CustomFaceCount above.
    ## For dense cloud (buildDenseCloud)
    source_data: Metashape.DenseCloudData # Recommended: DenseCloudData. Others include: PointCloudData and ModelData.
    volumetric_masks: False # Default False; True for volumetric masking during 3D mesh generation, as documented here https://www.agisoft.com/index.php?id=48

buildTexture: # (Metashape: buildTexture)
    enabled: False
    ## For depth maps (buldModel)
    mapping_mode: Metashape.GenericMapping # [LegacyMapping, GenericMapping, OrthophotoMapping, AdaptiveOrthophotoMapping, SphericalMapping, CameraMapping]
    blending_mode: Metashape.MosaicBlending # Recommended: Mosaic. Other options: [AverageBlending, MosaicBlending, MinBlending, MaxBlending, DisabledBlending]
    texture_size: 16384 # integer, multiple of 4096

buildTexture: # (Metashape: buildTexture)
    enabled: True
    ## For depth maps (buldModel)
    source_data: Metashape.DenseCloudData
    pixel_size: 0.010
    tile_size: 128
    face_count: 4000